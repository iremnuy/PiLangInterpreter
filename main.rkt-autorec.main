#lang racket

(provide (all-defined-out))
(define input-file "example1.pi")

;(define (main)
 ; (let ((program (parse input-file)))
   ; (eval program)))


; read and parse the input file
(define parse (lambda (input-file)
        (letrec (
            [input-port (open-input-file input-file)]
            [read-and-combine (lambda ()
                (let ([line (read input-port)])
                    (if (eof-object? line)
                        '()
                        (append `(,line) (read-and-combine))
                    )
                    (printf "line: ~a\n" line)
                )
            )]
            )
            (read-and-combine)
        )
    )
)
(define create-hash (lambda (vars values)
        (letrec (
            [create-hash-iter (lambda (vars values hash)
                (if (null? vars)
                    hash
                    (create-hash-iter (cdr vars) (cdr values) (hash-set hash (car vars) (car values)))
                )
            )]
            )
            (create-hash-iter vars values (hash))
        )
    )
)

(define add-to-hash (lambda (old-hash new-hash)
        (foldl (lambda (key hash) (hash-set hash key (hash-ref new-hash key)))
            old-hash
            (hash-keys new-hash)
        )
    )
)

(define eval-program (lambda (program-str)
         ((printf "Hello, world!\n") (get (eval-exprs (parse program-str) empty-state) '-r))
    )
)

; solution starts here
; 1. empty-state (5 points)
(define empty-state (make-hash)) ;no parameters
; 2. get (5 points)
(define (get state var) ;get is the func name state and var are parameters
  (let ((val (hash-ref state var #f)))
    (if (eq? val #f)
        var
        val)))

; 3. put (5 points)
;(define (put state var val) (hash-set state var val)) ;state var and val are parameters
(define (put state key value)
  (let ((new-hash (create-hash (list key) (list value))))
    (add-to-hash state new-hash)))

(define (operator? expr)
  (and (symbol? expr)
       (memq expr '(+ - * / < >))))

(define (type-of x)
  (cond
    ((string? x) 'string)
    ((number? x) 'number)
    ((boolean? x) 'boolean)
    ((pair? x) 'pair)
    ((null? x) 'null)
    ((symbol? x) 'symbol)
    ((procedure? x) 'procedure)
    (else 'unknown)))


(define (eval-expr expr state) (let ((type (type-of expr)))(printf "expr type is ~s" type))
  (cond
    ((number? expr) (put state '-r expr)) ;if expr is a number create a new pair in state
    ((boolean? expr)  (put state '-r expr))
    ((operator? expr)(let ((val (eval expr)))(put state '-r val)))
    ((symbol? expr)
     (cond ((hash-has-key? state expr)
            (let ((val (hash-ref state expr)) (printf "symbol cond"))
              (put state '-r val)
              state))
           (else state (printf "else "))))
    
    ((null? expr) (put state '-r (list)) (printf "null"))
    ((list? expr)
     (let ((operator (car expr)) ;call the according function by checking operator
           (operands (cdr expr)))
       (cond
         ((eq? operator 'quote) (cons state (car operands)))
         ((eq? operator ':=) (let ((var (car operands))
                                    (val-expr (cadr operands))
                                   )
                                (apply := var val-expr state)))
         ((eq? operator 'while:) (let ((test-expr (car operands))
                                    (body-exprs (cadr operands))
                                   )
                                (apply while: test-expr body-exprs state)))
         ;((eq? operator 'func) (apply func operands state))
         ((eq? operator 'if:) (let ((test-expr (car operands))
                                    (then-exprs (cadr operands))
                                    (else-exprs (caddr operands)))
                                (apply if: test-expr then-exprs else-exprs state)))

          ((operator? operator)
          (let ((evaluated-operands (map-eval operands state))) (printf "bu mapevadan çıkan list ~a" evaluated-operands) ;if this list starts with an op (+ 1 2 ) seperate it
            (put state '-r (apply (eval operator)(take evaluated-operands (sub1 (length evaluated-operands)))))))
           ((symbol? operator)
          (let* ((new-state (eval-expr operator state))( val(hash-ref new-state '-r))) ;if it is like (a) take the whole expr not car or cdr
            (put new-state '-r val)))

         
         (else
          (printf "else blok")
           (let ((proc (eval-expr operator state))
                 (args (map (lambda (operand) (eval-expr operand state)) operands)))
             (apply proc args))))))))



; 4. := (15 points)

(define (:= var val-expr state)
  (let* ([state (eval-expr val-expr state)] 
         [val (hash-ref state '-r)]
         [new-state (put state var val)])
    new-state))




; 5. if: (15 points)
(define (if: test-expr then-exprs else-exprs state)
  (let ((result-state (eval-expr test-expr state)))
     (printf "Result state after test-expr: ~s\n" result-state)
    (if (hash-ref result-state '-r)
        (eval-expr then-exprs result-state)
        (eval-expr else-exprs result-state))))

; 6. while: (15 points)
(define (while: test-expr body-exprs state)
  (let ((result-state (eval-expr test-expr state)))
    (if (hash-ref result-state '-r)
        (while: test-expr body-exprs (eval-exprs body-exprs result-state))
        result-state)))

 (define (map-eval lst state)
  (if (null? lst)
      (list empty-state)
      (let* ((result-state (eval-expr (car lst) state)) ;first element of the curretn state , call evalutation
             (rest-result (map-eval (cdr lst) result-state))) ;for rest of the state recursively call mapeval
        (cons (hash-ref result-state '-r) rest-result))))
       

; 7. func (15 points)
(define func 0)
; 8. eval-expr (20 points)


; 9 eval-exprs (5 points)
(define (eval-exprs exprs state)
  (foldl (lambda (expr st)
           (eval-expr expr st))
         state   ;for each pair in state 
         exprs))  ;for each expression

